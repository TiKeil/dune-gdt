// This file is part of the dune-gdt project:
//   https://github.com/dune-community/dune-gdt
// Copyright 2010-2016 dune-gdt developers and contributors. All rights reserved.
// License: Dual licensed as BSD 2-Clause License (http://opensource.org/licenses/BSD-2-Clause)
//      or  GPL-2.0+ (http://opensource.org/licenses/gpl-license)
//          with "runtime exception" (http://www.dune-project.org/license.html)
// Authors:
//   Felix Schindler (2017)

#ifndef DUNE_GDT_PROJECTIONS_DIRICHLET_PBH
#define DUNE_GDT_PROJECTIONS_DIRICHLET_PBH
#if HAVE_DUNE_PYBINDXI

#include <dune/pybindxi/pybind11.h>

#include "dirichlet.hh"

namespace Dune {
namespace GDT {


template <class GV, class S, class R, class F = double>
pybind11::class_<DirichletProjectionLocalizableOperator<GV, S, R, F>, XT::Grid::Walker<GV>>
bind_DirichletProjectionLocalizableOperator(pybind11::module& m, const std::string& space_id, const std::string& la_id)
{
  namespace py = pybind11;
  using namespace pybind11::literals;

  typedef DirichletProjectionLocalizableOperator<GV, S, R, F> C;
  py::class_<C, XT::Grid::Walker<GV>> c(
      m, std::string("DirichletProjectionLocalizableOperator__" + space_id + "__" + la_id).c_str());
  c.def("apply", [](C& self) { self.apply(); });

  m.def(std::string("make_localizable_dirichlet_projection_operator").c_str(),
        [](const XT::Grid::BoundaryInfo<typename XT::Grid::Intersection<GV>::Type>& boundary_info,
           const S& source,
           R& range) {
          return make_localizable_dirichlet_projection_operator(range.space().grid_view(), boundary_info, source, range)
              .release();
        },
        "boundary_info"_a,
        "source"_a,
        "range"_a,
        py::keep_alive<0, 1>(),
        py::keep_alive<0, 2>(),
        py::keep_alive<0, 3>());

  return c;
} // ... bind_DirichletProjectionLocalizableOperator(...)


} // namespace GDT
} // namespace Dune

#endif // HAVE_DUNE_PYBINDXI
#endif // DUNE_GDT_PROJECTIONS_DIRICHLET_PBH
