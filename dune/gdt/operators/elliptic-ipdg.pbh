// This file is part of the dune-gdt project:
//   https://github.com/dune-community/dune-gdt
// Copyright 2010-2016 dune-gdt developers and contributors. All rights reserved.
// License: Dual licensed as BSD 2-Clause License (http://opensource.org/licenses/BSD-2-Clause)
//      or  GPL-2.0+ (http://opensource.org/licenses/gpl-license)
//          with "runtime exception" (http://www.dune-project.org/license.html)
// Authors:
//   Felix Schindler (2017)

#ifndef DUNE_GDT_OPERATORS_ELLIPTIC_IPDG_PBH
#define DUNE_GDT_OPERATORS_ELLIPTIC_IPDG_PBH
#if HAVE_DUNE_PYBINDXI

#include <dune/pybindxi/pybind11.h>

#include <dune/xt/common/string.hh>

#include "elliptic-ipdg.hh"
#include "base.pbh"

namespace Dune {
namespace GDT {
namespace internal {


template <class DF, typename DT, LocalEllipticIpdgIntegrands::Method ipdg_method>
struct elliptic_ipdg_matrix_operator_bind_helper
{
  static std::string suffix()
  {
    return "diffusion_factor_and_tensor";
  }

  template <class C>
  static void addbind_factory_methods(pybind11::module& m, const std::string& method_id, const std::string& la_id)
  {
    namespace py = pybind11;
    using namespace pybind11::literals;

    typedef typename C::RangeSpaceType R;
    typedef typename C::MatrixType MatrixType;

    m.def(std::string(method_id + "__" + la_id).c_str(),
          [](const DF& diffusion_factor,
             const DT& diffusion_tensor,
             const XT::Grid::BoundaryInfo<typename R::GridViewType::Intersection>& boundary_info,
             const R& space,
             const size_t over_integrate) {
            return make_elliptic_ipdg_matrix_operator<MatrixType, ipdg_method>(
                       diffusion_factor, diffusion_tensor, boundary_info, space, over_integrate)
                .release(); //         <- b.c. EllipticIpdgMatrixOperator is not movable, returning the raw pointer lets
          }, //                                                                     pybind11 correctly manage the memory
          "diffusion_factor"_a,
          "diffusion_tensor"_a,
          "boundary_info"_a,
          "space"_a,
          "over_integrate"_a = 0,
          py::keep_alive<0, 1>(),
          py::keep_alive<0, 2>(),
          py::keep_alive<0, 3>(),
          py::keep_alive<0, 4>());

    m.def(std::string(method_id).c_str(),
          [](const DF& diffusion_factor,
             const DT& diffusion_tensor,
             const XT::Grid::BoundaryInfo<typename R::GridViewType::Intersection>& boundary_info,
             MatrixType& matrix,
             const R& space,
             const size_t over_integrate) {
            return make_elliptic_ipdg_matrix_operator<ipdg_method>(
                       diffusion_factor, diffusion_tensor, boundary_info, matrix, space, over_integrate)
                .release(); //                                                                     <- s.a. for release()
          },
          "diffusion_factor"_a,
          "diffusion_tensor"_a,
          "boundary_info"_a,
          "matrix"_a,
          "space"_a,
          "over_integrate"_a = 0,
          py::keep_alive<0, 1>(),
          py::keep_alive<0, 2>(),
          py::keep_alive<0, 3>(),
          py::keep_alive<0, 4>(),
          py::keep_alive<0, 5>());
  } // ... addbind_factory_methods(...)
}; // struct elliptic_ipdg_matrix_operator_bind_helper

template <class D, LocalEllipticIpdgIntegrands::Method ipdg_method>
struct elliptic_ipdg_matrix_operator_bind_helper<D, void, ipdg_method>
{
  static std::string suffix()
  {
    return "single_diffusion";
  }

  template <class C>
  static void addbind_factory_methods(pybind11::module& m, const std::string& method_id, const std::string& la_id)
  {
    namespace py = pybind11;
    using namespace pybind11::literals;

    typedef typename C::RangeSpaceType R;
    typedef typename C::MatrixType MatrixType;

    m.def(std::string(method_id + "__" + la_id).c_str(),
          [](const D& diffusion,
             const XT::Grid::BoundaryInfo<typename R::GridViewType::Intersection>& boundary_info,
             const R& space,
             const size_t over_integrate) {
            return make_elliptic_ipdg_matrix_operator<MatrixType, ipdg_method>(
                       diffusion, boundary_info, space, over_integrate)
                .release(); //                                                                     <- s.a. for release()
          },
          "diffusion"_a,
          "boundary_info"_a,
          "space"_a,
          "over_integrate"_a = 0,
          py::keep_alive<0, 1>(),
          py::keep_alive<0, 2>(),
          py::keep_alive<0, 3>());

    m.def(std::string(method_id).c_str(),
          [](const D& diffusion,
             const XT::Grid::BoundaryInfo<typename R::GridViewType::Intersection>& boundary_info,
             MatrixType& matrix,
             const R& space,
             const size_t over_integrate) {
            return make_elliptic_ipdg_matrix_operator<ipdg_method>(
                       diffusion, boundary_info, matrix, space, over_integrate)
                .release(); //                                                                     <- s.a. for release()
          },
          "diffusion"_a,
          "boundary_info"_a,
          "matrix"_a,
          "space"_a,
          "over_integrate"_a = 0,
          py::keep_alive<0, 1>(),
          py::keep_alive<0, 2>(),
          py::keep_alive<0, 3>(),
          py::keep_alive<0, 4>());
  } // ... addbind_factory_methods(...)
}; // struct elliptic_ipdg_matrix_operator_bind_helper<..., void>


} // namespace internal


template <class DF,
          typename DT, // may be void
          class R,
          LocalEllipticIpdgIntegrands::Method method,
          class M = typename XT::LA::Container<typename R::RangeFieldType>::MatrixType,
          class GV = typename R::GridViewType,
          class S = R,
          class F = typename R::RangeFieldType>
pybind11::class_<EllipticIpdgMatrixOperator<DF, DT, R, method, M, GV, S, F>> bind_elliptic_ipdg_matrix_operator(
    pybind11::module& m, const std::string& space_id, const std::string& la_id, const std::string& method_id)
{
  static_assert(std::is_same<R, S>::value, "");
  static_assert(std::is_same<GV, typename R::GridViewType>::value, "");

  namespace py = pybind11;
  using namespace pybind11::literals;

  typedef EllipticIpdgMatrixOperator<DF, DT, R, method, M, GV, S, F> C;
  const std::string suffix =
      la_id + "__" + space_id + "_" + internal::elliptic_ipdg_matrix_operator_bind_helper<DF, DT, method>::suffix();

  auto c = bind_matrix_operator<C>(m, "Elliptic" + method_id + "MatrixOperator__" + suffix);

  internal::elliptic_ipdg_matrix_operator_bind_helper<DF, DT, method>::template addbind_factory_methods<C>(
      m, "make_elliptic_" + XT::Common::to_lower(method_id) + "_matrix_operator", la_id);

  return c;
} // ... bind_elliptic_ipdg_matrix_operator(...)


} // namespace GDT
} // namespace Dune

#endif // HAVE_DUNE_PYBINDXI
#endif // DUNE_GDT_OPERATORS_ELLIPTIC_IPDG_PBH
