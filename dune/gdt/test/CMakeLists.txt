# This file is part of the dune-gdt project:
#   https://github.com/dune-community/dune-gdt
# Copyright 2010-2016 dune-gdt developers and contributors. All rights reserved.
# License: BSD 2-Clause License (http://opensource.org/licenses/BSD-2-Clause)
# Authors:
#   Felix Schindler (2013, 2016)
#   Tobias Leibner  (2016)

enable_testing()

BEGIN_TESTCASES()

END_TESTCASES()

foreach (test ${dxt_test_binaries})
  if (${test} MATCHES spaces)
    list(APPEND spaces_test_binaries ${test})
  elseif (${test} MATCHES operators)
    list(APPEND operators_test_binaries ${test})
  elseif (${test} MATCHES projections)
    if (${test} MATCHES fem)
      list(APPEND projections_fem_test_binaries ${test})
    elseif (${test} MATCHES pdelab)
      list(APPEND projections_pdelab_test_binaries ${test})
    else (${test})
      list(APPEND projections_default_test_binaries ${test})
    endif (${test})
  elseif (${test} MATCHES prolongations)
    if (${test} MATCHES fem)
      list(APPEND prolongations_fem_test_binaries ${test})
    elseif (${test} MATCHES pdelab)
      list(APPEND prolongations_pdelab_test_binaries ${test})
    else (${test})
      list(APPEND prolongations_default_test_binaries ${test})
    endif (${test})
  elseif (${test} MATCHES linearelliptic__cg AND ${test} MATCHES alugrid)
    list(APPEND linearelliptic_cg_alugrid_test_binaries ${test})
  elseif (${test} MATCHES linearelliptic__cg AND ${test} MATCHES yaspgrid)
    list(APPEND linearelliptic_cg_yaspgrid_test_binaries ${test})
  elseif (${test} MATCHES linearelliptic__swipdg_discretization AND ${test} MATCHES alugrid)
    list(APPEND linearelliptic_swipdg_discretization_alugrid_test_binaries ${test})
  elseif (${test} MATCHES linearelliptic__swipdg_discretization AND ${test} MATCHES yaspgrid)
    list(APPEND linearelliptic_swipdg_discretization_yaspgrid_test_binaries ${test})
  elseif (${test} MATCHES linearelliptic__swipdg_estimators)
    list(APPEND linearelliptic_swipdg_estimator_alugrid_test_binaries ${test})
  elseif (${test} MATCHES hyperbolic AND ${test} MATCHES yaspgrid)
    list(APPEND hyperbolic_yaspgrid_test_binaries ${test})
  else (${test})
    list(APPEND other_binaries ${test})
  endif (${test})
endforeach (test ${testnames})

add_custom_target(test_binaries_space DEPENDS ${spaces_test_binaries})
add_custom_target(test_binaries_operator DEPENDS ${operators_test_binaries})
add_custom_target(test_binaries_projection_default DEPENDS ${projections_default_test_binaries})
add_custom_target(test_binaries_projection_fem DEPENDS ${projections_fem_test_binaries})
add_custom_target(test_binaries_projection_pdelab DEPENDS ${projections_pdelab_test_binaries})
add_custom_target(test_binaries_prolongation_default DEPENDS ${prolongations_default_test_binaries})
add_custom_target(test_binaries_prolongation_fem DEPENDS ${prolongations_fem_test_binaries})
add_custom_target(test_binaries_prolongation_pdelab DEPENDS ${prolongations_pdelab_test_binaries})
add_custom_target(test_binaries_linearelliptic_cg_discretization_alugrid DEPENDS ${linearelliptic_cg_alugrid_test_binaries})
add_custom_target(test_binaries_linearelliptic_cg_discretization_yaspgrid DEPENDS ${linearelliptic_cg_yaspgrid_test_binaries})
add_custom_target(test_binaries_linearelliptic_swipdg_discretization_alugrid DEPENDS ${linearelliptic_swipdg_discretization_alugrid_test_binaries})
add_custom_target(test_binaries_linearelliptic_swipdg_discretization_yaspgrid DEPENDS ${linearelliptic_swipdg_discretization_yaspgrid_test_binaries})
add_custom_target(test_binaries_linearelliptic_swipdg_estimator_alugrid DEPENDS ${linearelliptic_swipdg_estimator_alugrid_test_binaries})
add_custom_target(test_binaries_hyperbolic_fv_discretization_yaspgrid DEPENDS ${hyperbolic_yaspgrid_test_binaries})
add_custom_target(test_binaries_other DEPENDS ${other_binaries})

# link spe10 data file if present
if (NOT ${SPE10MODEL1DATA} STREQUAL "SPE10MODEL1DATA-NOTFOUND")
  set (SPE10MODEL1DATA_TARGET_FILENAME "${CMAKE_CURRENT_BINARY_DIR}/perm_case1.dat")
  if (NOT EXISTS ${SPE10MODEL1DATA_TARGET_FILENAME})
    execute_process(COMMAND ln -s "${SPE10MODEL1DATA}" "${SPE10MODEL1DATA_TARGET_FILENAME}")
  endif(NOT EXISTS ${SPE10MODEL1DATA_TARGET_FILENAME})
else(NOT ${SPE10MODEL1DATA} STREQUAL "SPE10MODEL1DATA-NOTFOUND")
        message(STATUS "Downloading Spe10 model1 data file:" ${SPE10MODEL1DATA})
  execute_process(COMMAND wget -nc http://wwwmath.uni-muenster.de/num/ohlberger/research/software/perm_case1.zip
                  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
  execute_process(COMMAND unzip -o perm_case1.zip WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
  set (SPE10MODEL1DATA_TARGET_FILENAME "${CMAKE_CURRENT_BINARY_DIR}/perm_case1.dat")
endif (NOT ${SPE10MODEL1DATA} STREQUAL "SPE10MODEL1DATA-NOTFOUND")

add_subdirectory(linearelliptic)
add_subdirectory(hyperbolic)


foreach(test_target ${dxt_test_binaries})
    if(${test_target} MATCHES linearelliptic__)
        target_link_libraries(${test_target} cg_expectations)
    endif(${test_target} MATCHES linearelliptic__)
    if(${test_target} MATCHES linearelliptic__)
        target_link_libraries(${test_target} swipdg_expectations)
    endif(${test_target} MATCHES linearelliptic__)
    if(${test_target} MATCHES hyperbolic__fv_discretization)
        target_link_libraries(${test_target} expectations_hyperbolic_fv_discretizations_yaspgrid)
    endif(${test_target} MATCHES hyperbolic__fv_discretization)
endforeach(${test_target} ${dxt_test_binaries})
